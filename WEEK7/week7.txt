prg1_c
...............
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#define MAX 80
#define PORT 10099
#define SA struct sockaddr
//recv(sockfd,str,100,0);
//send(sockfd,&a,sizeof(a),0);
void fnc(int sockfd)
{
    float op1,op2,res;
    char oprt;
	while(1)
    {
        printf("enter 2 oparands(if any one is zero program terminates) : ");
        scanf("%f%f",&op1,&op2);
        printf("enter operator : ");
        scanf("%s",&oprt);  
        send(sockfd,&op1,sizeof(op1),0);
        send(sockfd,&op2,sizeof(op2),0);
        send(sockfd,&oprt,sizeof(oprt),0);
        if(op1==0 || op2==0)
            break;
        recv(sockfd,&res,sizeof(res),0);
        printf("result : %f (from server)\n",res);
    }
}

int main()
{
	int sockfd, connfd;
	struct sockaddr_in servaddr, cli;
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd == -1) 
    {
		printf("socket creation failed...\n");
		exit(0);
	}
	bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");
	servaddr.sin_port = htons(PORT);
    if (connect(sockfd, (SA*)&servaddr, sizeof(servaddr)) != 0) {
		printf("connection with the server failed...\n");
		exit(0);
	}
	fnc(sockfd);
    close(sockfd);
}


prg1_s
..........
#include <stdio.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#define MAX 80
#define PORT 10099
#define SA struct sockaddr
//recv(sockfd,str,100,0);
//nd(sockfd,&a,sizeof(a),0);
void fnc(int sockfd)
{
	float op1,op2,res;
    char oprt;
	while(1)
    {  
        recv(sockfd,&op1,sizeof(op1),0);
        recv(sockfd,&op2,sizeof(op2),0);
        recv(sockfd,&oprt,sizeof(oprt),0);
        if(op1==0 || op2==0)
            break;
        switch(oprt)
        {
            case '+':res=op1+op2;break;
            case '-':res=op1-op2;break;
            case '*':res=op1*op2;break;
            case '/':res=op1/op2;break;
            default:res=0;break;
        }
        send(sockfd,&res,sizeof(res),0);
        printf("result : %.2f (sent to client)\n",res);
    }
}

int main()
{
	int sockfd, connfd, len;
	struct sockaddr_in servaddr, cli;
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd == -1) 
    {
		printf("socket creation failed...\n");
		exit(0);
	}
	bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
	servaddr.sin_port = htons(PORT);
    if ((bind(sockfd, (SA*)&servaddr, sizeof(servaddr))) != 0) 
    {
		printf("socket bind failed...\n");
		exit(0);
	}
	if ((listen(sockfd, 5)) != 0) {
		printf("Listen failed...\n");
		exit(0);
	}
	len = sizeof(cli);
    connfd = accept(sockfd, (SA*)&cli, &len);
	if (connfd < 0) {
		printf("server accept failed...\n");
		exit(0);
	}
	fnc(connfd);
    close(sockfd);
}


prg2_c
.............
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#define MAX 80
#define PORT 10099
#define SA struct sockaddr
//recv(sockfd,str,100,0);
//send(sockfd,&a,sizeof(a),0);
void fnc(int sockfd)
{
    char str[30];
	while(1)
    {
        bzero(str,30);
        printf("enter string : ");
        scanf("%s",str);  
        send(sockfd,str,sizeof(str),0);
        if(strcmp(str,"end")==0)
            break;
        recv(sockfd,str,sizeof(str),0);
        printf("result : %s (from server)\n",str);
    }
}

int main()
{
	int sockfd, connfd;
	struct sockaddr_in servaddr, cli;
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd == -1) 
    {
		printf("socket creation failed...\n");
		exit(0);
	}
	bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");
	servaddr.sin_port = htons(PORT);
    if (connect(sockfd, (SA*)&servaddr, sizeof(servaddr)) != 0) {
		printf("connection with the server failed...\n");
		exit(0);
	}
	fnc(sockfd);
    close(sockfd);
}


prg2_s
..............
#include <stdio.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#define MAX 80
#define PORT 10099
#define SA struct sockaddr
//recv(sockfd,str,100,0);
//nd(sockfd,&a,sizeof(a),0);
void fnc(int sockfd)
{
	char str[30];
	while(1)
    {  
        int flag=1;
        recv(sockfd,str,sizeof(str),0);
        if(strcmp(str,"end")==0)
            break;
        int len=strlen(str);
        for(int i=0;i<(len/2);i++)
            if(str[i]!=str[len-i-1])
            {
                strcpy(str,"not palindrome");
                flag=0;
                break;
            }
        if(flag)
            strcpy(str,"palindrome");
        send(sockfd,str,sizeof(str),0);       
        printf("result : %s (sent to client)\n",str);
    }
}

int main()
{
	int sockfd, connfd, len;
	struct sockaddr_in servaddr, cli;
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd == -1) 
    {
		printf("socket creation failed...\n");
		exit(0);
	}
	bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
	servaddr.sin_port = htons(PORT);
    if ((bind(sockfd, (SA*)&servaddr, sizeof(servaddr))) != 0) 
    {
		printf("socket bind failed...\n");
		exit(0);
	}
	if ((listen(sockfd, 5)) != 0) {
		printf("Listen failed...\n");
		exit(0);
	}
	len = sizeof(cli);
    connfd = accept(sockfd, (SA*)&cli, &len);
	if (connfd < 0) {
		printf("server accept failed...\n");
		exit(0);
	}
	fnc(connfd);
    close(sockfd);
}


prg3_c
..............
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#define MAX 80
#define PORT 10099
#define SA struct sockaddr
//recv(sockfd,str,100,0);
//send(sockfd,&a,sizeof(a),0);
struct person
{
    char panno[20];
    float income,invest[4];
};
void fnc(int sockfd)
{
    struct person p;
    float res[2]={0,0};
    printf("enter pan no : ");
    scanf("%s",p.panno);  
    printf("enter anual income : ");
    scanf("%f",&p.income);
    printf("enter investmets on PPF NSC NPS SIP respectively(0 if no investments) :");
    scanf("%f%f%f%f",&p.invest[0],&p.invest[1],&p.invest[2],&p.invest[3]);
    send(sockfd,&p,sizeof(p),0);
    recv(sockfd,res,sizeof(res),0);
    switch((int)res[0])
    {
        case 0:printf("no tax (from server)\n");break;
        case 1:printf("pay tax : %.2f  (from server)\n",res[1]);break;
        case 2:printf("get refund : %.2f  (from server)\n",res[1]);break;
    }
}

int main()
{
	int sockfd, connfd;
	struct sockaddr_in servaddr, cli;
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd == -1) 
    {
		printf("socket creation failed...\n");
		exit(0);
	}
	bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");
	servaddr.sin_port = htons(PORT);
    if (connect(sockfd, (SA*)&servaddr, sizeof(servaddr)) != 0) {
		printf("connection with the server failed...\n");
		exit(0);
	}
	fnc(sockfd);
    close(sockfd);
}


prg3_s
..............
#include <stdio.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#define MAX 80
#define PORT 10099
#define SA struct sockaddr
//recv(sockfd,str,100,0);
//nd(sockfd,&a,sizeof(a),0);
struct person
{
    char panno[20];
    float income,invest[4];
};
struct pan_det
{
    char panno[20];
    float advance_tax;
};
void fnc(int sockfd,struct pan_det pan[])
{
    struct person p;
    float res[2]={1,0};
    recv(sockfd,&p,sizeof(p),0);
    float rem_income=p.income-p.invest[0]-p.invest[1]-p.invest[2]-p.invest[3];
    float intrest=0;
    if (rem_income<=500000)
        intrest=0;
    else if(rem_income<=700000)
        intrest=.05;
    else if(rem_income<=1000000)
        intrest=.1;
    else if(rem_income<=1500000)
        intrest=.15;
    else
        intrest=.2;
    float tax=rem_income*intrest;
    res[1]=tax;
    printf("pan no : %s\n",p.panno);
    printf("anual income : %.2f\n",p.income);
    printf("investments :\n\tPPF : %.2f\n\tNSC : %.2f\n\tNPS : %.2f\n\tSIP : %.2f \n",p.invest[0],p.invest[1],p.invest[2],p.invest[3]);
    printf("remaining income after investment : %.2f\n",rem_income);
    printf("tax intrest : %.2f %\t tax ammount : %.2f\n",(intrest*100),tax);
    for(int i=0;i<5;i++)
    {
        if(strcmp(pan[i].panno,p.panno)==0)
        {
            printf("advance paid tax : %.2f\n",pan[i].advance_tax);
            if(tax==pan[i].advance_tax)
            {
                res[0]=0;
                res[1]=0;
            }
            else if(tax>pan[i].advance_tax)
            {
                res[0]=1;
                res[1]=tax-pan[i].advance_tax;
            }
            else
            {
                res[0]=2;
                res[1]=pan[i].advance_tax-tax;
            }
            break;
        }
    }
    send(sockfd,res,sizeof(res),0);
    switch((int)res[0])
    {
        case 0:printf("no tax (sent to client)\n");break;
        case 1:printf("pay tax : %.2f  (sent to client)\n",res[1]);break;
        case 2:printf("get refund : %.2f  (sent to client)\n",res[1]);break;
    }
}

int main()
{
	int sockfd, connfd, len;
	struct sockaddr_in servaddr, cli;
    struct pan_det pan[5];
    {
        strcpy(pan[0].panno,"DAT00123");
        pan[0].advance_tax=10000;
        strcpy(pan[1].panno,"DAT00456");
        pan[1].advance_tax=50000;
        strcpy(pan[2].panno,"DAT00789");
        pan[2].advance_tax=5000;
        strcpy(pan[3].panno,"DAT00157");
        pan[3].advance_tax=100000;
        strcpy(pan[4].panno,"DAT00360");
        pan[4].advance_tax=200000;
    }
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd == -1) 
    {
		printf("socket creation failed...\n");
		exit(0);
	}
	bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
	servaddr.sin_port = htons(PORT);
    if ((bind(sockfd, (SA*)&servaddr, sizeof(servaddr))) != 0) 
    {
		printf("socket bind failed...\n");
		exit(0);
	}
	if ((listen(sockfd, 5)) != 0) {
		printf("Listen failed...\n");
		exit(0);
	}
	len = sizeof(cli);
    connfd = accept(sockfd, (SA*)&cli, &len);
	if (connfd < 0) {
		printf("server accept failed...\n");
		exit(0);
	}
	fnc(connfd,pan);
    close(sockfd);
}
