1)
#include <stdio.h>
#include <stdlib.h>
int main()
{
        FILE *f1,*f2;
        char fname[50],f;
        printf("\nenter the file name:");
        scanf("%s",fname);
        f1=fopen(fname,"r");
        if(f1==NULL)
        {
                printf("cannot open file\n");
                exit(0);
        }
        printf("enter the second file:");
        printf("\nenter the file name:");
        scanf("%s",fname);
        f2=fopen(fname,"w");
        if(f2==NULL)
        {
                printf("cannot open the file\n");
                exit(0);
        }
        f=fgetc(f1);
        while(f!=EOF)
        {
                fputc(f,f2);
                f=fgetc(f1);
        }
        printf("file copied successfully\n");
        fclose(f1);
        fclose(f2);
        return 0;
}

2)
#include<fcntl.h>
#include<stdio.h>
#include<unistd.h>
#include<string.h>
int main(int argc,char* argv[]){
        char filename[50];
        int count=0;
        int call,fd;
        char buffer[1020];
        strcpy(filename,argv[1]);
        if(fork()){
                printf("\nParent Process: FileName Reading:\n");
                printf("\nfileName:");
                scanf("%s",filename);
                strcpy(filename,argv[1]);
                printf("\nfileName: %s\n",filename);
        }
        else{
                printf("\nChild Process: FileContent Reading:\n");
                strcpy(filename,argv[1]);
                printf("\nfileName: %s\n",filename);
                fd = open(filename,O_RDONLY);
                if(fd == -1){
                        //if file doesn't exist
                        printf("\nFile Doesn't Exist!!");
                        close(fd);
                        return 0;
                }
                while(read(fd,buffer,1) && count<10){
                        printf("\n%c",buffer[0]);
                        count++;
                }
                close(fd);
                }
        return 0;
}


3)
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
int main()
{
        int n;
        printf("Enter the number of elements:");
        scanf("%d",&n);
        int a[n];
        printf("Enter the elements:");
        for(int i=0;i<n;i++)
                scanf("%d",&a[i]);
        int pid=fork();
        if(pid==0)
        {
                for(int i=0;i<n-1;i++)
                        for(int j=0;j<n-i-1;j++)
                        {
                                if(a[j]>a[j+1])
                                {
                                        int temp=a[j];
                                        a[j]=a[j+1];
                                        a[j+1]=temp;
                                }
                        }
                printf("Sorted array is:");
                for(int i=0;i<n;i++)
                        printf("%d ",a[i]);
                printf("\n");
        }
        return 0;
}


4)
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/wait.h>
int main()
{
        int n;
        printf("Enter the number of elements:");
        scanf("%d",&n);
        int a[n];
        printf("Enter the elements:");
        for(int i=0;i<n;i++)
                scanf("%d",&a[i]);
        int pid=fork();
        if(pid==0)
        {
                int ele;
                int flag=0;
                printf("Enter the element to search:");
                scanf("%d",&ele);
                for(int i=0;i<n;i++)
                {
                        if(a[i]==ele)
                        {
                                printf("Element is found at location %d\n",i);
                                flag=1;
                        }
                }
                if(flag==0)
                        printf("Element not found\n");
        }
        if(pid>0)
                wait(NULL);
        return 0;
}


5)
#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>
#include<fcntl.h>
int main()
{
        int fd = open("a.txt",O_WRONLY|O_CREAT,0777);
        if(fd == -1)
        {
                printf("Not able to open a file,check file name\n");
                return 0;
        }
        char str[30];
        printf("Enter Something in the file:");
        scanf("%s",str);
        sleep(1);
        write(fd,str,30);
        printf("\n Closing file..");
        sleep(1);
        close(fd);
        int pid = fork();
        if(pid == 0)
        {
                printf("\n Child Process: opening file");
                sleep(2);
                fd = open("a.txt",O_RDONLY);
                read(fd,str,30);
                printf("\n%s\n",str);
        }
        wait(0);
        return 0;
}


6)
#include<stdio.h>
#include<unistd.h>
#include <stdlib.h>
void main(int argc,char* argv[]){
        int num1,num2;
        double res = 0;
        char op;
        num1 = atoi(argv[1]);
        num2 = atoi(argv[2]);
        op = *argv[3];
        if(fork() == 0){
                printf("\nChild Process:");
                switch (op)
                {
                        case '+':
                                res = num1+num2;
                                break;
                        case '-':
                                res = num1-num2;
                                break;
                        case 'x':
                                res = num1*num2;
                                break;
                        case '/':
                                res = num1/num2;
                                break;
                        default:
                                printf("\nInvalid Operator!!");
                                return;
                }
                printf("Result:%lf",res);
        }
        printf("\n");
}


7)
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/wait.h>
int main()
{
        int n;
        printf("Enter the number");
        scanf("%d",&n);
        int pid=fork();
        if(pid==0)
        {
                for(int i=1;i<=10;i++)
                {
                        int res=n*i;
                        printf("%d * %d = %d",n,i,res);
                        printf("\n");
                }
        }
        if(pid>0)
                wait(NULL);
        return 0;
}                                                                                                                                                                     ~              